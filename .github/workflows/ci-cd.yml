name: CI/CD for Django Project

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10.12", "3.12.0"]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
            pip-

      - name: Config env
        run: |
          cp env_template .env
          echo "DB_URL=sqlite:///${{ vars.ECS_PATH }}/db.sqlite3" >> .env

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest

      - name: Black check
        run: black --check .


  deploy_staging:
    runs-on: ubuntu-latest
    environment: staging

    needs: build

    if: github.ref == 'refs/heads/dev'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.ECS_KEY }}

      - name: Deploy to staging
        run: |
          ssh -o StrictHostKeyChecking=no ${{ vars.ECS_USER }}@${{ vars.ECS_HOST }} << 'EOF'
          if [ ! -d "${{ vars.ECS_PATH }}" ]; then
            git clone --branch dev git@github.com:Quantum-Future-2068/wristcheck_api.git ${{ vars.ECS_PATH }}
          else
            cd ${{ vars.ECS_PATH }}
            git fetch origin
            git reset --hard origin/dev
          fi
          
          cd ${{ vars.ECS_PATH }}
          cat <<EOT > .env
          ENVIRONMENT=staging
          PORT=${{ vars.PORT }}
          ALLOWED_HOSTS=${{ vars.ALLOWED_HOSTS }}
          CSRF_TRUSTED_ORIGINS=${{ vars.CSRF_TRUSTED_ORIGINS }}
          CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}
          WECHAT_MINI_GET_SESSION_KEY_URL=${{ vars.WECHAT_MINI_GET_SESSION_KEY_URL }}
          WECHAT_MINI_APPID=${{ secrets.WECHAT_MINI_APPID }}
          WECHAT_MINI_SECRET=${{ secrets.WECHAT_MINI_SECRET }}
          WRISTCHECK_API=${{ vars.WRISTCHECK_API }}
          OSS_ACCESS_KEY_ID=${{ secrets.OSS_ACCESS_KEY_ID }}
          OSS_ACCESS_KEY_SECRET=${{ secrets.OSS_ACCESS_KEY_SECRET }}
          OSS_ENDPOINT=${{ vars.OSS_ENDPOINT }}
          OSS_BUCKET=${{ vars.OSS_BUCKET }}
          DOMAIN=${{ vars.DOMAIN }}
          STATIC_DOMAIN=${{ vars.STATIC_DOMAIN }}
          SENTRY_DSN_URL=${{ secrets.SENTRY_DSN_URL }}
          CERTFILE_PATH=${{ vars.CERTFILE_PATH }}
          KEYFILE_PATH=${{ vars.KEYFILE_PATH }}
          DB_URL=${{ secrets.DB_URL }}
          EOT
          
          make migrate
          make collectstatic
          make restart
          EOF

  deploy_prod:
    runs-on: ubuntu-latest
    environment: prod

    needs: build

    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.ECS_KEY }}

      - name: Deploy to production
        run: |
          ssh -o StrictHostKeyChecking=no ${{ vars.ECS_USER }}@${{ vars.ECS_HOST }} << 'EOF'
          if [ ! -d "${{ vars.ECS_PATH }}" ]; then
            git clone --branch main git@github.com:Quantum-Future-2068/wristcheck_api.git ${{ vars.ECS_PATH }}
          else
            cd ${{ vars.ECS_PATH }}
            git fetch origin
            git reset --hard origin/main
          fi
          
          cd ${{ vars.ECS_PATH }}
          cat <<EOT > .env
          ENVIRONMENT=prod
          PORT=${{ vars.PORT }}
          ALLOWED_HOSTS=${{ vars.ALLOWED_HOSTS }}
          CSRF_TRUSTED_ORIGINS=${{ vars.CSRF_TRUSTED_ORIGINS }}
          CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}
          WECHAT_MINI_GET_SESSION_KEY_URL=${{ vars.WECHAT_MINI_GET_SESSION_KEY_URL }}
          WECHAT_MINI_APPID=${{ secrets.WECHAT_MINI_APPID }}
          WECHAT_MINI_SECRET=${{ secrets.WECHAT_MINI_SECRET }}
          WRISTCHECK_API=${{ vars.WRISTCHECK_API }}
          OSS_ACCESS_KEY_ID=${{ secrets.OSS_ACCESS_KEY_ID }}
          OSS_ACCESS_KEY_SECRET=${{ secrets.OSS_ACCESS_KEY_SECRET }}
          OSS_ENDPOINT=${{ vars.OSS_ENDPOINT }}
          OSS_BUCKET=${{ vars.OSS_BUCKET }}
          DOMAIN=${{ vars.DOMAIN }}
          STATIC_DOMAIN=${{ vars.STATIC_DOMAIN }}
          SENTRY_DSN_URL=${{ secrets.SENTRY_DSN_URL }}
          CERTFILE_PATH=${{ vars.CERTFILE_PATH }}
          KEYFILE_PATH=${{ vars.KEYFILE_PATH }}
          DB_URL=${{ secrets.DB_URL }}
          EOT
          
          make migrate
          make collectstatic
          make restart
          EOF
